'use client';

import { useState } from 'react';

interface APIResponse {
  message: string;
  event_id: string;
  sort: string;
  limit: number;
  cors: string;
}

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState<APIResponse | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [sort, setSort] = useState('market_cap');
  const [limit, setLimit] = useState(10);

  const fetchData = async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(
        `http://localhost:8080/list/cryptocurrencies/${sort}/${limit}?key=demo`
      );

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      setData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">üöÄ Backend API Debug</h1>

        <div className="bg-white p-6 rounded-lg shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">API Controls</h2>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-2">Sort Method:</label>
              <select
                value={sort}
                onChange={(e) => setSort(e.target.value)}
                className="w-full p-2 border rounded-md"
              >
                <option value="market_cap">Market Cap</option>
                <option value="alt_rank">AltRank</option>
                <option value="galaxy_score">Galaxy Score</option>
                <option value="sentiment">Sentiment</option>
                <option value="volume_24h">24h Volume</option>
                <option value="price">Price</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Limit:</label>
              <input
                type="number"
                min="1"
                max="100"
                value={limit}
                onChange={(e) => setLimit(parseInt(e.target.value))}
                className="w-full p-2 border rounded-md"
              />
            </div>

            <div className="flex items-end">
              <button
                onClick={fetchData}
                disabled={loading}
                className="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 disabled:bg-gray-400"
              >
                {loading ? 'Processing...' : 'Fetch Data'}
              </button>
            </div>
          </div>

          <div className="text-sm text-gray-600">
            <strong>Backend URL:</strong> http://localhost:8080/list/cryptocurrencies/{sort}/{limit}?key=demo
          </div>
        </div>

        {loading && (
          <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg mb-6">
            <div className="flex items-center">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-yellow-600 mr-3"></div>
              <span className="text-yellow-800">Processing Inngest function...</span>
            </div>
          </div>
        )}

        {error && (
          <div className="bg-red-50 border border-red-200 p-4 rounded-lg mb-6">
            <h3 className="text-red-800 font-semibold">‚ùå Error</h3>
            <p className="text-red-700">{error}</p>
            <div className="mt-2 text-sm text-red-600">
              <strong>Troubleshooting:</strong>
              <ul className="list-disc list-inside mt-1">
                <li>Make sure backend is running: <code>cd server && go run main.go</code></li>
                <li>Check that port 8080 is accessible</li>
                <li>Verify CORS is enabled in backend logs</li>
              </ul>
            </div>
          </div>
        )}

        {data && (
          <div className="bg-green-50 border border-green-200 p-4 rounded-lg mb-6">
            <h3 className="text-green-800 font-semibold">‚úÖ API Response</h3>
            <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <strong>Message:</strong> {data.message}
              </div>
              <div>
                <strong>Event ID:</strong> <code className="bg-gray-100 px-1 rounded">{data.event_id}</code>
              </div>
              <div>
                <strong>Sort:</strong> {data.sort}
              </div>
              <div>
                <strong>Limit:</strong> {data.limit}
              </div>
            </div>
          </div>
        )}

        {data && (
          <div className="bg-gray-50 border p-4 rounded-lg">
            <h3 className="font-semibold mb-2">üêõ Raw API Response (Debug)</h3>
            <pre className="bg-black text-green-400 p-4 rounded-md overflow-auto text-sm">
              {JSON.stringify(data, null, 2)}
            </pre>
          </div>
        )}

        <div className="mt-8 bg-blue-50 border border-blue-200 p-4 rounded-lg">
          <h3 className="text-blue-800 font-semibold">üîç Backend Status</h3>
          <p className="text-blue-700 text-sm mt-1">
            If you see CORS errors, make sure your Go backend is running with the CORS middleware enabled.
            The backend should show "CORS enabled for Next.js on port 3000" in its startup logs.
          </p>
        </div>
      </div>
    </div>
  );
}
